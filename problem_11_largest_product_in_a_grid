#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
:brief: Module containing solutions of Project Euler Problem 11.
:author: Michal Modlinski
:created: 31.08.2017
"""
from time import time

matrix = ["08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08",
          "49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00",
          "81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65",
          "52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91",
          "22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80",
          "24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50",
          "32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70",
          "67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21",
          "24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72",
          "21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95",
          "78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92",
          "16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57",
          "86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58",
          "19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40",
          "04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66",
          "88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69",
          "04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36",
          "20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16",
          "20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54",
          "01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"]


def largest_product_1(mtr):

    def cell(x, y):
        return int(mtr[y - 1][(x - 1) * 3:(x - 1) * 3 + 2])

    def directions():
        for y in range(1, 21):
            for x in range(1, 18):
                yield [cell(x, y), cell(x + 1, y), cell(x + 2, y), cell(x + 3, y)]
        for x in range(1, 21):
            for y in range(1, 18):
                yield [cell(x, y), cell(x, y + 1), cell(x, y + 2), cell(x, y + 3)]
        for x in range(1, 18):
            for y in range(1, 18):
                yield [cell(x, y), cell(x + 1, y + 1), cell(x + 2, y + 2), cell(x + 3, y + 3)]
        for x in range(4, 21):
            for y in range(1, 18):
                yield [cell(x, y), cell(x - 1, y + 1), cell(x - 2, y + 2), cell(x - 3, y + 3)]

    def product(values):
        result = 1
        for value in values:
            result *= value
        return result

    def products():
        for numbers in directions():
            yield product(numbers)

    return max(products())







# 4444444444444444444444444
#
# def test():
#     ns = """08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
#   49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
#   81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
#   52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
#   22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
#   24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
#   32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
#   67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
#   24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
#   21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
#   78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
#   16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
#   86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
#   19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
#   04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
#   88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
#   04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
#   20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
#   20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
#   01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48""".split('\n')
#
#     xy = [[0] * 20 for x in range(20)]
#
#     for x in range(0, 20):
#         xa = map(int, ns[x].strip().split())
#         for y in range(0, 20):
#             xy[x][y] = xa[y]
#
#     n = 0
#
#     for x in range(0, 20):
#         for y in range(0, 20):
#             if x <= 16:
#                 hor = xy[x][y] * xy[x + 1][y] * xy[x + 2][y] * xy[x + 3][y]
#                 if hor > n:
#                     n = hor
#                 if y <= 16:
#                     dia = xy[x][y] * xy[x + 1][y + 1] * xy[x + 2][y + 2] * xy[x + 3][y + 3]
#                     if dia > n:
#                         n = dia
#                 if y >= 3:
#                     dia = xy[x][y] * xy[x + 1][y - 1] * xy[x + 2][y - 2] * xy[x + 3][y - 3]
#                     if dia > n:
#                         n = dia
#             if y <= 16:
#                 ver = xy[x][y] * xy[x][y + 1] * xy[x][y + 2] * xy[x][y + 3]
#                 if ver > n:
#                     n = ver
#
#     print(n)
#
#
# test()
#
# 444444444444444444444
#
# 555555555555555555555
#
# A = matrix
#
# mul = lambda X: reduce(lambda x, y: x * y, X)
# ziplist = lambda X, n: zip(*[X[i:-(n - i)] for i in range(n)])
#
# # Print horzontial multiply
# print max([max([mul(r) for r in ziplist(row, 4)]) for row in A])
#
# # Print vertical multiply
# print max([max([mul(r) for r in ziplist(row, 4)]) for row in zip(*A)])
#
# # Print diagonal (right) multiply
# print max([max([mul(n) for n in zip(row[0][:-4], row[1][1:-3], row[2][2:-2], row[3][3:-1])]) for row in ziplist(A, 4)])
#
# # Print diagonal (left) multiply
# print max([max([mul(n) for n in zip(row[3][:-4], row[2][1:-3], row[1][2:-2], row[0][3:-1])]) for row in ziplist(A, 4)])
#
# 55555555555555555555
#
# 66666666666666666666
#
# from operator import mul
#
# def euler_11(file="problem11.txt"):
#     table = map(lambda x:map(int, x), map(lambda x:x.split(), open(file,"r").read().split("\n")))
#     results = []
#     for x in xrange(20):
#         for y in xrange(20):
#             if x+3 < 20:
#                 results.append(reduce(mul, [table[y][x+i] for i in xrange(4)]))
#             if y+3 < 20:
#                 results.append(reduce(mul, [table[y+i][x] for i in xrange(4)]))
#             if y+3 < 20 and x+3 <20:
#                 results.append(reduce(mul, [table[y+i][x+i] for i in xrange(4)]))
#             if x > 2 and y+3 < 20:
#                 results.append(reduce(mul, [table[y+i][x-i] for i in xrange(4)]))
#     return max(results)
#
# 666666666666666666666
#
# 777777777777777777777
#
# grid = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
#     [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0],
#     [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
#     [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91],
#     [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
#     [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
#     [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
#     [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
#     [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
#     [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95],
#     [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
#     [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57],
#     [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
#     [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
#     [04, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
#     [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
#     [04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
#     [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
#     [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
#     [01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]
#
#
# def get_diag(x, y):
#     diag = []
#     for i in range(4):
#         diag.append(grid[y + i][x + i])
#     return diag
#
#
# def transposed(matrix):
#     return zip(*matrix)
#
#
# def prod(nums):
#     return reduce(lambda x, y: x * y, nums, 1)
#
#
# def max_in_row(row):
#     biggest = 0
#     for count in range(21):
#         chk = row[count:count + 4]
#         if prod(chk) > biggest: biggest = prod(chk)
#     return biggest
#
#
# hormax = max((max_in_row(row) for row in grid))
# vertmax = max((max_in_row(row) for row in transposed(grid)))
#
# run_prod_leftdiag = 0
# run_prod_rightdiag = 0
# for x in range(17):
#     for y in range(17):
#         diag = get_diag(x, y)
#         product = prod(diag)
#         if product > run_prod_leftdiag: run_prod_leftdiag = product
#
# for row in grid:
#     row.reverse()
#
# for x in range(17):
#     for y in range(17):
#         diag = get_diag(x, y)
#         product = prod(diag)
#         if product > run_prod_rightdiag: run_prod_rightdiag = product
#
# print max(hormax, vertmax, run_prod_leftdiag, run_prod_rightdiag)

if __name__ == "__main__":
    start = time()
    assert largest_product_1(matrix) == 70600674
    print("Time of execution for summation_1: ", time() - start)
